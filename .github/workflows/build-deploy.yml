name: Build & Deploy to ECS Fargate

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CLUSTER_NAME: ${{ secrets.ECR_CLUSTER_NAME }}
  SERVICE_NAME: ${{ secrets.ECR_SERVICE_NAME }}

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write # for OIDC
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # --- 1. Configure AWS credentials -------------------------------
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubWebappDeploy
          aws-region: ${{ env.AWS_REGION }}

      # --- 2. Log in to ECR -------------------------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        # The file exists only in the runner’s workspace; it’s never committed.
      - name: Write .env for the build
        run: |
          cat > .env <<EOF

          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID=${{ secrets.GOOGLE_MAPS_MAP_ID }}
          EOF
      # --- 3. Build & push --------------------------------------------
      - name: Build, tag & push image to ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

  migrate:
    name: Migrate DB
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: npm ci
      - name: Run Drizzle migrations
        run: npx drizzle-kit migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy:
    name: Deploy ECS
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster  ${{ env.CLUSTER_NAME }} \
            --service  ${{ env.SERVICE_NAME }} \
            --force-new-deployment \
            --region   eu-central-1
